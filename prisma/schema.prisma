generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(uuid())
  password String
  name       String
  surname    String
  points     Int
  telephone  String
  email      String
  picture    String
  role       UserRole[]
  created_at DateTime?  @default(now())
  updated_at DateTime?  @default(now())

  appointment  Appointment[]
  pet       Pet[]

  @@map("users")
}

model Pet {
  id         String        @id @default(uuid())
  name       String
  age        Int
  picture    String
  created_at DateTime?     @default(now())
  updated_at DateTime?     @default(now())
  user_id    String        // chave estrangeira para User
  breed_id   String        // chave estrangeira para Breed
  species_id String        // chave estrangeira para Species
  color      String
  
  user       User         @relation(fields: [user_id], references: [id])
  breed      Breed        @relation(fields: [breed_id], references: [id])
  species    Species       @relation(fields: [species_id], references: [id])
  appointment  Appointment[]
  allergy   PetAllergy[]
  vaccine   PetVaccine[]  
  disease   PetDisease[]
  
  @@map("pet")
}

model Breed {
  id    String   @id @default(uuid())
  name  String
  created_at DateTime?  @default(now())
  updated_at DateTime?  @default(now())
  pet  Pet[]
  
  @@map("breeds")
}


model Species {
  id       String       @id @default(uuid()) 
  name     String
  created_at DateTime?  @default(now())
  updated_at DateTime?  @default(now())

  pet Pet[]

  @@map("species")
}

model Appointment {

  id String @id @default(uuid())
  start_time DateTime 
  end_time   DateTime
  status Boolean @default(false)
  type String
  user_id String
  pet_id String
  created_at DateTime?  @default(now())
  updated_at DateTime?  @default(now())

  user User @relation(fields: [user_id], references: [id])
  pet Pet @relation(fields: [pet_id], references: [id])
  @@map("appointment")
}

model Disease {
  id       String       @id @default(uuid())
  name     String
  pet     PetDisease[]  // relação muitos para muitos com Pet
  created_at DateTime?  @default(now())
  updated_at DateTime?  @default(now())

  @@map("diseases")
}

model Vaccine {
  id       String       @id @default(uuid())
  name     String
  pet     PetVaccine[]  // relação muitos para muitos com Pet
  created_at DateTime?  @default(now())
  updated_at DateTime?  @default(now())

  @@map("vaccines")
}

model Allergy {
  id      String       @id @default(uuid())
  name    String
  pet     PetAllergy[]
  created_at DateTime?  @default(now())
  updated_at DateTime?  @default(now())

  @@map("allergies")
}

model PetVaccine {
  pet         Pet      @relation(fields: [pet_id], references: [id])
  pet_id      String    // chave estrangeira para Pet
  vaccine     Vaccine  @relation(fields: [vaccine_id], references: [id])
  vaccine_id  String    // chave estrangeira para Vaccines
  dose        Int
  assignedAt  DateTime  @default(now())
  assignedBy  String
  created_at DateTime?  @default(now())
  updated_at DateTime?  @default(now())

  @@id([pet_id, vaccine_id])
}

model PetDisease{
  pet Pet @relation(fields: [pet_id], references: [id])
  pet_id String
  disease Disease @relation(fields: [disease_id], references: [id])
  disease_id String
  assignedAt  DateTime  @default(now())
  assignedBy  String
  healed Boolean
  created_at DateTime?  @default(now())
  updated_at DateTime?  @default(now())

  @@id([pet_id, disease_id])
}

model PetAllergy{
  pet Pet @relation(fields: [pet_id], references: [id])
  pet_id String
  allergy Allergy @relation(fields: [allergy_id], references: [id])
  allergy_id String
  assignedAt  DateTime  @default(now())
  assignedBy  String
  created_at DateTime?  @default(now())
  updated_at DateTime?  @default(now())

  @@id([pet_id, allergy_id])
}

model Role{
  id String @id @default(uuid())
  title String
  user UserRole[]
  created_At DateTime? @default(now())
  updated_At DateTime? @default(now())

}

model UserRole{
  user User @relation(fields: [user_id], references: [id])
  user_id String
  role Role @relation(fields: [role_id], references: [id])
  role_id String
  assignedAt  DateTime  @default(now())
  assignedBy  String
  created_at DateTime?  @default(now())
  updated_at DateTime?  @default(now())

  @@id([user_id, role_id])
}


